<Type Name="ILifecycleEventService" FullName="Microsoft.Maui.LifecycleEvents.ILifecycleEventService">
  <TypeSignature Language="C#" Value="public interface ILifecycleEventService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILifecycleEventService" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.LifecycleEvents.ILifecycleEventService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILifecycleEventService" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILifecycleEventService" />
  <TypeSignature Language="F#" Value="type ILifecycleEventService = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContainsEvent">
      <MemberSignature Language="C#" Value="public bool ContainsEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.LifecycleEvents.ILifecycleEventService.ContainsEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsEvent (eventName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsEvent(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="abstract member ContainsEvent : string -&gt; bool" Usage="iLifecycleEventService.ContainsEvent eventName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventDelegates&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TDelegate&gt; GetEventDelegates&lt;TDelegate&gt; (string eventName) where TDelegate : Delegate;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!!TDelegate&gt; GetEventDelegates&lt;(class System.Delegate) TDelegate&gt;(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.LifecycleEvents.ILifecycleEventService.GetEventDelegates``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEventDelegates(Of TDelegate As Delegate) (eventName As String) As IEnumerable(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; where TDelegate : Delegate System::Collections::Generic::IEnumerable&lt;TDelegate&gt; ^ GetEventDelegates(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="abstract member GetEventDelegates : string -&gt; seq&lt;'Delegate (requires 'Delegate :&gt; Delegate)&gt; (requires 'Delegate :&gt; Delegate)" Usage="iLifecycleEventService.GetEventDelegates eventName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate">
          <Constraints>
            <BaseTypeName>System.Delegate</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="eventName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
