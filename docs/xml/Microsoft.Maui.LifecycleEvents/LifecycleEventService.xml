<Type Name="LifecycleEventService" FullName="Microsoft.Maui.LifecycleEvents.LifecycleEventService">
  <TypeSignature Language="C#" Value="public class LifecycleEventService : Microsoft.Maui.LifecycleEvents.ILifecycleBuilder, Microsoft.Maui.LifecycleEvents.ILifecycleEventService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LifecycleEventService extends System.Object implements class Microsoft.Maui.LifecycleEvents.ILifecycleBuilder, class Microsoft.Maui.LifecycleEvents.ILifecycleEventService" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.LifecycleEvents.LifecycleEventService" />
  <TypeSignature Language="VB.NET" Value="Public Class LifecycleEventService&#xA;Implements ILifecycleBuilder, ILifecycleEventService" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifecycleEventService : Microsoft::Maui::LifecycleEvents::ILifecycleBuilder, Microsoft::Maui::LifecycleEvents::ILifecycleEventService" />
  <TypeSignature Language="F#" Value="type LifecycleEventService = class&#xA;    interface ILifecycleEventService&#xA;    interface ILifecycleBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Maui.LifecycleEvents.ILifecycleBuilder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Maui.LifecycleEvents.ILifecycleEventService</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LifecycleEventService (System.Collections.Generic.IEnumerable&lt;Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration&gt; registrations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration&gt; registrations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.LifecycleEvents.LifecycleEventService.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (registrations As IEnumerable(Of LifecycleEventRegistration))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LifecycleEventService(System::Collections::Generic::IEnumerable&lt;Microsoft::Maui::LifecycleEvents::LifecycleEventRegistration ^&gt; ^ registrations);" />
      <MemberSignature Language="F#" Value="new Microsoft.Maui.LifecycleEvents.LifecycleEventService : seq&lt;Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration&gt; -&gt; Microsoft.Maui.LifecycleEvents.LifecycleEventService" Usage="new Microsoft.Maui.LifecycleEvents.LifecycleEventService registrations" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registrations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration&gt;" />
      </Parameters>
      <Docs>
        <param name="registrations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEvent&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public void AddEvent&lt;TDelegate&gt; (string eventName, TDelegate action) where TDelegate : Delegate;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEvent&lt;(class System.Delegate) TDelegate&gt;(string eventName, !!TDelegate action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.LifecycleEvents.LifecycleEventService.AddEvent``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEvent(Of TDelegate As Delegate) (eventName As String, action As TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; where TDelegate : Delegate virtual void AddEvent(System::String ^ eventName, TDelegate action);" />
      <MemberSignature Language="F#" Value="abstract member AddEvent : string * 'Delegate -&gt; unit (requires 'Delegate :&gt; Delegate)&#xA;override this.AddEvent : string * 'Delegate -&gt; unit (requires 'Delegate :&gt; Delegate)" Usage="lifecycleEventService.AddEvent (eventName, action)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Maui.LifecycleEvents.ILifecycleBuilder.AddEvent``1(System.String,``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate">
          <Constraints>
            <BaseTypeName>System.Delegate</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="action" Type="TDelegate" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="eventName">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsEvent">
      <MemberSignature Language="C#" Value="public bool ContainsEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.LifecycleEvents.LifecycleEventService.ContainsEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsEvent (eventName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsEvent(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="abstract member ContainsEvent : string -&gt; bool&#xA;override this.ContainsEvent : string -&gt; bool" Usage="lifecycleEventService.ContainsEvent eventName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Maui.LifecycleEvents.ILifecycleEventService.ContainsEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventDelegates&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TDelegate&gt; GetEventDelegates&lt;TDelegate&gt; (string eventName) where TDelegate : Delegate;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!!TDelegate&gt; GetEventDelegates&lt;(class System.Delegate) TDelegate&gt;(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.LifecycleEvents.LifecycleEventService.GetEventDelegates``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEventDelegates(Of TDelegate As Delegate) (eventName As String) As IEnumerable(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; where TDelegate : Delegate virtual System::Collections::Generic::IEnumerable&lt;TDelegate&gt; ^ GetEventDelegates(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="abstract member GetEventDelegates : string -&gt; seq&lt;'Delegate (requires 'Delegate :&gt; Delegate)&gt; (requires 'Delegate :&gt; Delegate)&#xA;override this.GetEventDelegates : string -&gt; seq&lt;'Delegate (requires 'Delegate :&gt; Delegate)&gt; (requires 'Delegate :&gt; Delegate)" Usage="lifecycleEventService.GetEventDelegates eventName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Maui.LifecycleEvents.ILifecycleEventService.GetEventDelegates``1(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate">
          <Constraints>
            <BaseTypeName>System.Delegate</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="eventName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
