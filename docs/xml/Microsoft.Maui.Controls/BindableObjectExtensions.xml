<Type Name="BindableObjectExtensions" FullName="Microsoft.Maui.Controls.BindableObjectExtensions">
  <TypeSignature Language="C#" Value="public static class BindableObjectExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BindableObjectExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.Controls.BindableObjectExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module BindableObjectExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindableObjectExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type BindableObjectExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contains convenience extension methods for <see cref="T:Microsoft.Maui.Controls.BindableObject" />.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="GetPropertyIfSet&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetPropertyIfSet&lt;T&gt; (this Microsoft.Maui.Controls.BindableObject bindableObject, Microsoft.Maui.Controls.BindableProperty bindableProperty, T returnIfNotSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetPropertyIfSet&lt;T&gt;(class Microsoft.Maui.Controls.BindableObject bindableObject, class Microsoft.Maui.Controls.BindableProperty bindableProperty, !!T returnIfNotSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObjectExtensions.GetPropertyIfSet``1(Microsoft.Maui.Controls.BindableObject,Microsoft.Maui.Controls.BindableProperty,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyIfSet(Of T) (bindableObject As BindableObject, bindableProperty As BindableProperty, returnIfNotSet As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T GetPropertyIfSet(Microsoft::Maui::Controls::BindableObject ^ bindableObject, Microsoft::Maui::Controls::BindableProperty ^ bindableProperty, T returnIfNotSet);" />
      <MemberSignature Language="F#" Value="static member GetPropertyIfSet : Microsoft.Maui.Controls.BindableObject * Microsoft.Maui.Controls.BindableProperty * 'T -&gt; 'T" Usage="Microsoft.Maui.Controls.BindableObjectExtensions.GetPropertyIfSet (bindableObject, bindableProperty, returnIfNotSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="bindableObject" Type="Microsoft.Maui.Controls.BindableObject" RefType="this" />
        <Parameter Name="bindableProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="returnIfNotSet" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="bindableObject">To be added.</param>
        <param name="bindableProperty">To be added.</param>
        <param name="returnIfNotSet">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAppTheme&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetAppTheme&lt;T&gt; (this Microsoft.Maui.Controls.BindableObject self, Microsoft.Maui.Controls.BindableProperty targetProperty, T light, T dark);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAppTheme&lt;T&gt;(class Microsoft.Maui.Controls.BindableObject self, class Microsoft.Maui.Controls.BindableProperty targetProperty, !!T light, !!T dark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObjectExtensions.SetAppTheme``1(Microsoft.Maui.Controls.BindableObject,Microsoft.Maui.Controls.BindableProperty,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetAppTheme(Of T) (self As BindableObject, targetProperty As BindableProperty, light As T, dark As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetAppTheme(Microsoft::Maui::Controls::BindableObject ^ self, Microsoft::Maui::Controls::BindableProperty ^ targetProperty, T light, T dark);" />
      <MemberSignature Language="F#" Value="static member SetAppTheme : Microsoft.Maui.Controls.BindableObject * Microsoft.Maui.Controls.BindableProperty * 'T * 'T -&gt; unit" Usage="Microsoft.Maui.Controls.BindableObjectExtensions.SetAppTheme (self, targetProperty, light, dark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="Microsoft.Maui.Controls.BindableObject" RefType="this" />
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="light" Type="T" />
        <Parameter Name="dark" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <param name="targetProperty">To be added.</param>
        <param name="light">To be added.</param>
        <param name="dark">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAppThemeColor">
      <MemberSignature Language="C#" Value="public static void SetAppThemeColor (this Microsoft.Maui.Controls.BindableObject self, Microsoft.Maui.Controls.BindableProperty targetProperty, Microsoft.Maui.Graphics.Color light, Microsoft.Maui.Graphics.Color dark);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAppThemeColor(class Microsoft.Maui.Controls.BindableObject self, class Microsoft.Maui.Controls.BindableProperty targetProperty, class Microsoft.Maui.Graphics.Color light, class Microsoft.Maui.Graphics.Color dark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObjectExtensions.SetAppThemeColor(Microsoft.Maui.Controls.BindableObject,Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Graphics.Color,Microsoft.Maui.Graphics.Color)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetAppThemeColor (self As BindableObject, targetProperty As BindableProperty, light As Color, dark As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetAppThemeColor(Microsoft::Maui::Controls::BindableObject ^ self, Microsoft::Maui::Controls::BindableProperty ^ targetProperty, Microsoft::Maui::Graphics::Color ^ light, Microsoft::Maui::Graphics::Color ^ dark);" />
      <MemberSignature Language="F#" Value="static member SetAppThemeColor : Microsoft.Maui.Controls.BindableObject * Microsoft.Maui.Controls.BindableProperty * Microsoft.Maui.Graphics.Color * Microsoft.Maui.Graphics.Color -&gt; unit" Usage="Microsoft.Maui.Controls.BindableObjectExtensions.SetAppThemeColor (self, targetProperty, light, dark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="self" Type="Microsoft.Maui.Controls.BindableObject" RefType="this" />
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="light" Type="Microsoft.Maui.Graphics.Color" />
        <Parameter Name="dark" Type="Microsoft.Maui.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="self">To be added.</param>
        <param name="targetProperty">To be added.</param>
        <param name="light">To be added.</param>
        <param name="dark">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public static void SetBinding (this Microsoft.Maui.Controls.BindableObject self, Microsoft.Maui.Controls.BindableProperty targetProperty, string path, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter converter = default, string stringFormat = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBinding(class Microsoft.Maui.Controls.BindableObject self, class Microsoft.Maui.Controls.BindableProperty targetProperty, string path, valuetype Microsoft.Maui.Controls.BindingMode mode, class Microsoft.Maui.Controls.IValueConverter converter, string stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding(Microsoft.Maui.Controls.BindableObject,Microsoft.Maui.Controls.BindableProperty,System.String,Microsoft.Maui.Controls.BindingMode,Microsoft.Maui.Controls.IValueConverter,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetBinding (self As BindableObject, targetProperty As BindableProperty, path As String, Optional mode As BindingMode = Microsoft.Maui.Controls.BindingMode.Default, Optional converter As IValueConverter = Nothing, Optional stringFormat As String = Nothing)" />
      <MemberSignature Language="F#" Value="static member SetBinding : Microsoft.Maui.Controls.BindableObject * Microsoft.Maui.Controls.BindableProperty * string * Microsoft.Maui.Controls.BindingMode * Microsoft.Maui.Controls.IValueConverter * string -&gt; unit" Usage="Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding (self, targetProperty, path, mode, converter, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-maui-9.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Using bindings with string paths is not trim safe. Use expression-based binding instead.", Url=null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Using bindings with string paths is not trim safe. Use expression-based binding instead.", Url=null)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="self" Type="Microsoft.Maui.Controls.BindableObject" RefType="this" />
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="Microsoft.Maui.Controls.BindingMode" />
        <Parameter Name="converter" Type="Microsoft.Maui.Controls.IValueConverter" />
        <Parameter Name="stringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="self">The <see cref="T:Microsoft.Maui.Controls.BindableObject" />.</param>
        <param name="targetProperty">The BindableProperty on which to set a binding.</param>
        <param name="path">A <see cref="T:System.String" /> indicating the property path to bind to.</param>
        <param name="mode">The <see cref="T:Microsoft.Maui.Controls.BindingMode" /> for the binding. This parameter is optional. Default is <see cref="F:Microsoft.Maui.Controls.BindingMode.Default" />.</param>
        <param name="converter">An <see cref="T:Microsoft.Maui.Controls.IValueConverter" /> for the binding. This parameter is optional. Default is <see langword="null" />.</param>
        <param name="stringFormat">A string used as stringFormat for the binding. This parameter is optional. Default is <see langword="null" />.</param>
        <summary>Creates and applies a binding to a property.</summary>
        <remarks>
          <para>The following example shows how to use the extension method to set a binding.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
public class PersonViewModel
{
    public string Name { get; set; }
    public string Company { get; set; }
}

// ...

var vm = new PersonViewModel {
    Name = "John Doe", 
    Company = "Xamarin"
}

var label = new Label ();
label.SetBinding (Label.TextProperty, "Name"); // "Name" is the property on the view model
label.BindingContext = vm;

Debug.WriteLine (label.Text); // prints "John Doe"
      ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding&lt;TSource,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static void SetBinding&lt;TSource,TProperty&gt; (this Microsoft.Maui.Controls.BindableObject self, Microsoft.Maui.Controls.BindableProperty targetProperty, Func&lt;TSource,TProperty&gt; getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = default, object? converterParameter = default, string? stringFormat = default, object? source = default, object? fallbackValue = default, object? targetNullValue = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBinding&lt;TSource, TProperty&gt;(class Microsoft.Maui.Controls.BindableObject self, class Microsoft.Maui.Controls.BindableProperty targetProperty, class System.Func`2&lt;!!TSource, !!TProperty&gt; getter, valuetype Microsoft.Maui.Controls.BindingMode mode, class Microsoft.Maui.Controls.IValueConverter converter, object converterParameter, string stringFormat, object source, object fallbackValue, object targetNullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding``2(Microsoft.Maui.Controls.BindableObject,Microsoft.Maui.Controls.BindableProperty,System.Func{``0,``1},Microsoft.Maui.Controls.BindingMode,Microsoft.Maui.Controls.IValueConverter,System.Object,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetBinding(Of TSource, TProperty) (self As BindableObject, targetProperty As BindableProperty, getter As Func(Of TSource, TProperty), Optional mode As BindingMode = Microsoft.Maui.Controls.BindingMode.Default, Optional converter As IValueConverter = Nothing, Optional converterParameter As Object = Nothing, Optional stringFormat As String = Nothing, Optional source As Object = Nothing, Optional fallbackValue As Object = Nothing, Optional targetNullValue As Object = Nothing)" />
      <MemberSignature Language="F#" Value="static member SetBinding : Microsoft.Maui.Controls.BindableObject * Microsoft.Maui.Controls.BindableProperty * Func&lt;'Source, 'Property&gt; * Microsoft.Maui.Controls.BindingMode * Microsoft.Maui.Controls.IValueConverter * obj * string * obj * obj * obj -&gt; unit" Usage="Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding (self, targetProperty, getter, mode, converter, converterParameter, stringFormat, source, fallbackValue, targetNullValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-maui-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="Microsoft.Maui.Controls.BindableObject" Index="0" FrameworkAlternate="net-maui-9.0" RefType="this">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" Index="1" FrameworkAlternate="net-maui-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="getter" Type="System.Func&lt;TSource,TProperty&gt;" Index="2" FrameworkAlternate="net-maui-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="mode" Type="Microsoft.Maui.Controls.BindingMode" Index="3" FrameworkAlternate="net-maui-9.0" />
        <Parameter Name="converter" Type="Microsoft.Maui.Controls.IValueConverter" Index="4" FrameworkAlternate="net-maui-9.0" />
        <Parameter Name="converterParameter" Type="System.Object" Index="5" FrameworkAlternate="net-maui-9.0" />
        <Parameter Name="stringFormat" Type="System.String" Index="6" FrameworkAlternate="net-maui-9.0" />
        <Parameter Name="source" Type="System.Object" Index="7" FrameworkAlternate="net-maui-9.0" />
        <Parameter Name="fallbackValue" Type="System.Object" Index="8" FrameworkAlternate="net-maui-9.0" />
        <Parameter Name="targetNullValue" Type="System.Object" Index="9" FrameworkAlternate="net-maui-9.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The source type.</typeparam>
        <typeparam name="TProperty">The property type.</typeparam>
        <param name="self">The <see cref="T:Microsoft.Maui.Controls.BindableObject" />.</param>
        <param name="targetProperty">The <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> on which to set a binding.</param>
        <param name="getter">An getter method used to retrieve the source property.</param>
        <param name="mode">The binding mode. This property is optional. Default is <see cref="F:Microsoft.Maui.Controls.BindingMode.Default" />.</param>
        <param name="converter">The converter. This parameter is optional. Default is <see langword="null" />.</param>
        <param name="converterParameter">An user-defined parameter to pass to the converter. This parameter is optional. Default is <see langword="null" />.</param>
        <param name="stringFormat">A String format. This parameter is optional. Default is <see langword="null" />.</param>
        <param name="source">An object used as the source for this binding. This parameter is optional. Default is <see langword="null" />.</param>
        <param name="fallbackValue">The value to use instead of the default value for the property, if no specified value exists.</param>
        <param name="targetNullValue">The value to supply for a bound property when the target of the binding is <see langword="null" />.</param>
        <summary>
            Creates a binding between a property on the source object and a property on the target object.
            </summary>
        <remarks>
          <para>The following example illustrates the setting of a binding using the extension method.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
                 public class PersonViewModel
                 {
                     public string Name { get; set; }
                     public Address? Address { get; set; }
                     // ...
                 }
                 
                 var vm = new PersonViewModel { Name = "John Doe" };
                 
                 var label = new Label();
                 label.SetBinding(Label.TextProperty, static (PersonViewModel vm) => vm.Name);
                 label.BindingContext = vm;
                 
                 vm.Name = "Jane Doe";
                 Debug.WriteLine(label.Text); // prints "Jane Doe"
             ]]></code>
          </example>
          <para>Not all methods can be used to define a binding. The expression must be a simple property access expression. The following are examples of valid and invalid expressions:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
                 // Valid: Property access
                 static (PersonViewModel vm) => vm.Name;
                 static (PersonViewModel vm) => vm.Address?.Street;
                 
                 // Valid: Array and indexer access
                 static (PersonViewModel vm) => vm.PhoneNumbers[0];
                 static (PersonViewModel vm) => vm.Config["Font"];
                 
                 // Valid: Casts
                 static (Label label) => (label.BindingContext as PersonViewModel).Name;
                 static (Label label) => ((PersonViewModel)label.BindingContext).Name;
                 
                 // Invalid: Method calls
                 static (PersonViewModel vm) => vm.GetAddress();
                 static (PersonViewModel vm) => vm.Address?.ToString();
                 
                 // Invalid: Complex expressions
                 static (PersonViewModel vm) => vm.Address?.Street + " " + vm.Address?.City;
                 static (PersonViewModel vm) => $"Name: {vm.Name}";
             ]]></code>
          </example>
        </remarks>
        <exception cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
  </Members>
</Type>
