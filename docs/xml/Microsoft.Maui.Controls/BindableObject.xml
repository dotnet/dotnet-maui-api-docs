<Type Name="BindableObject" FullName="Microsoft.Maui.Controls.BindableObject">
  <TypeSignature Language="C#" Value="public abstract class BindableObject : Microsoft.Maui.Controls.Internals.IDynamicResourceHandler, System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BindableObject extends System.Object implements class Microsoft.Maui.Controls.Internals.IDynamicResourceHandler, class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.Controls.BindableObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BindableObject&#xA;Implements IDynamicResourceHandler, INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindableObject abstract : Microsoft::Maui::Controls::Internals::IDynamicResourceHandler, System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type BindableObject = class&#xA;    interface INotifyPropertyChanged&#xA;    interface IDynamicResourceHandler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Maui.Controls.Internals.IDynamicResourceHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Provides a mechanism to propagate data changes from one object to another. Enables validation, type coercion, and an event system.
            </summary>
    <remarks>The <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class provides a data storage mechanism that enables the application developer to synchronize data between objects in response to changes, for example, between the View and View Model in the MVVM design pattern. All of the visual elements in the <c>Microsoft.Maui.Controls</c> namespace inherit from <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class, so they can all be used to bind the data behind their user interface.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindableObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindableObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class.
            </summary>
        <remarks>The <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class is abstract, and this constructor is protected. It is invoked by child constructors.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyBindings">
      <MemberSignature Language="C#" Value="protected void ApplyBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ApplyBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.ApplyBindings" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ApplyBindings ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ApplyBindings();" />
      <MemberSignature Language="F#" Value="member this.ApplyBindings : unit -&gt; unit" Usage="bindableObject.ApplyBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Applies all the current bindings to <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public object BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BindingContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.BindableObject.BindingContext" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ BindingContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingContext : obj with get, set" Usage="Microsoft.Maui.Controls.BindableObject.BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets an object that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Microsoft.Maui.Controls.BindableObject" />.
            This is a bindable property.
            </summary>
        <value>An <see cref="T:System.Object" /> that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Microsoft.Maui.Controls.BindableObject" />. This is a bindable property.</value>
        <remarks>
          Typically, the runtime performance is better if  <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Microsoft.Maui.Controls.BindableObject.SetBinding(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindingBase)" /> have been made.
          <para>The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):</para><example><code lang="csharp lang-csharp"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {
    Name = "John Doe",
    Company = "Xamarin"
};

Debug.WriteLine (label.Text); // prints "John Doe"
        ]]></code></example></remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.BindableObject.BindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event BindingContextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BindingContextChanged;" />
      <MemberSignature Language="F#" Value="member this.BindingContextChanged : EventHandler " Usage="member this.BindingContextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when the value of the <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> property changes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextProperty">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Maui.Controls.BindableProperty BindingContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Maui.Controls.BindableProperty BindingContextProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Maui.Controls.BindableObject.BindingContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingContextProperty As BindableProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly Microsoft::Maui::Controls::BindableProperty ^ BindingContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingContextProperty : Microsoft.Maui.Controls.BindableProperty" Usage="Microsoft.Maui.Controls.BindableObject.BindingContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bindable property for <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" />.</summary>
        <remarks>
          Typically, the runtime performance is better if  <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Microsoft.Maui.Controls.BindableObject.SetBinding(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindingBase)" /> have been made.
          <para>The following example shows how to set a binding to the BindingContext:</para><example><code lang="csharp lang-csharp"><![CDATA[
class PersonView : ContentView 
{
  public PersonView ()
  {
    var label = new Label ();
    label.SetBinding (Label.TextProperty, "Name");
    Content = label;
  }
}
    
var stack = new StackLayout {
  Orientation = StackOrientation.Vertical,  
};
    
var jane = new PersonView ();
jane.SetBinding (BindableObject.BindingContext, "Jane");
stack.Children.Add (jane);
    
var john = new PersonView ();
john.SetBinding (BindableObject.BindingContext, "John");
stack.Children.Add (john);
    
stack.BindingContext = new {Jane = new {Name = "Jane Doe"}, John = new {Name = "John Doe"}};
        ]]></code></example></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.ClearValue(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (property As BindableProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(Microsoft::Maui::Controls::BindableProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : Microsoft.Maui.Controls.BindableProperty -&gt; unit" Usage="bindableObject.ClearValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> to clear the value for.</param>
        <summary>
            Clears any value that is previously set for a bindable property.
            </summary>
        <remarks>When <paramref name="property" /> is read-only, nothing will happen.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="property" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (Microsoft.Maui.Controls.BindablePropertyKey propertyKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class Microsoft.Maui.Controls.BindablePropertyKey propertyKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.ClearValue(Microsoft.Maui.Controls.BindablePropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (propertyKey As BindablePropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(Microsoft::Maui::Controls::BindablePropertyKey ^ propertyKey);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : Microsoft.Maui.Controls.BindablePropertyKey -&gt; unit" Usage="bindableObject.ClearValue propertyKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="Microsoft.Maui.Controls.BindablePropertyKey" />
      </Parameters>
      <Docs>
        <param name="propertyKey">The key that identifies the bindable property to clear the value for.</param>
        <summary>
            Clears any value that is previously set for a bindable property, identified by its key.
            </summary>
        <remarks>
          <para>Calling this method on a readonly property will result in an InvalidOperationException.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="propertyKey" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="propertyKey" /> is a read-only property.</exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.CoerceValue(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (property As BindableProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(Microsoft::Maui::Controls::BindableProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : Microsoft.Maui.Controls.BindableProperty -&gt; unit" Usage="bindableObject.CoerceValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The bindable property to coerce the value of.</param>
        <summary>
            Coerces the value of the specified bindable property.
            This is done by invoking <see cref="T:Microsoft.Maui.Controls.BindableProperty.CoerceValueDelegate" /> of the specified bindable property.
            </summary>
        <remarks>If <see cref="T:Microsoft.Maui.Controls.BindableProperty.CoerceValueDelegate" /> is not assigned to, nothing will happen.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="property" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="property" /> is read-only.</exception>
        <exception cref="T:System.ArgumentException">Thrown when the value is invalid according to the assigned logic in <see cref="T:Microsoft.Maui.Controls.BindableProperty.ValidateValueDelegate" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (Microsoft.Maui.Controls.BindablePropertyKey propertyKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class Microsoft.Maui.Controls.BindablePropertyKey propertyKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.CoerceValue(Microsoft.Maui.Controls.BindablePropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (propertyKey As BindablePropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(Microsoft::Maui::Controls::BindablePropertyKey ^ propertyKey);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : Microsoft.Maui.Controls.BindablePropertyKey -&gt; unit" Usage="bindableObject.CoerceValue propertyKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="Microsoft.Maui.Controls.BindablePropertyKey" />
      </Parameters>
      <Docs>
        <param name="propertyKey">The key that identifies the bindable property to coerce the value of.</param>
        <summary>
            Coerces the value of the specified bindable property.
            This is done by invoking <see cref="T:Microsoft.Maui.Controls.BindableProperty.CoerceValueDelegate" /> of the specified bindable property.
            </summary>
        <remarks>If <see cref="T:Microsoft.Maui.Controls.BindableProperty.CoerceValueDelegate" /> is not assigned to, nothing will happen.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="propertyKey" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the bindable property identified by <paramref name="propertyKey" /> is read-only.</exception>
        <exception cref="T:System.ArgumentException">Thrown when the value is invalid according to the assigned logic in <see cref="T:Microsoft.Maui.Controls.BindableProperty.ValidateValueDelegate" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public Microsoft.Maui.Dispatching.IDispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Maui.Dispatching.IDispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.BindableObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As IDispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Maui::Dispatching::IDispatcher ^ Dispatcher { Microsoft::Maui::Dispatching::IDispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : Microsoft.Maui.Dispatching.IDispatcher" Usage="Microsoft.Maui.Controls.BindableObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Dispatching.IDispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dispatcher that was available when this bindable object was created,
            otherwise tries to find the nearest available dispatcher (probably the window's/app's).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (property As BindableProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(Microsoft::Maui::Controls::BindableProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.GetValue : Microsoft.Maui.Controls.BindableProperty -&gt; obj" Usage="bindableObject.GetValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The bindable property for which to get the value.</param>
        <summary>
            Returns the value that is contained in the given bindable property.
            </summary>
        <returns>The value that is contained in the <see cref="T:Microsoft.Maui.Controls.BindableProperty" />.</returns>
        <remarks>
          <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> and <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindableProperty,System.Object)" /> are used to access the values of properties that are implemented by a <see cref="T:Microsoft.Maui.Controls.BindableProperty" />.
            That is, application developers typically provide an interface for a bound property by defining a <see langword="public" /> property whose <see langword="get" /> accessor casts the result of <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> to the appropriate type and returns it, and whose <see langword="set" /> accessor uses <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindableProperty,System.Object)" /> to set the value on the correct property.
            Application developers should perform no other steps in the public property that defines the interface of the bound property.
            </remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="property" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSet">
      <MemberSignature Language="C#" Value="public bool IsSet (Microsoft.Maui.Controls.BindableProperty targetProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSet(class Microsoft.Maui.Controls.BindableProperty targetProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.IsSet(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSet (targetProperty As BindableProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSet(Microsoft::Maui::Controls::BindableProperty ^ targetProperty);" />
      <MemberSignature Language="F#" Value="member this.IsSet : Microsoft.Maui.Controls.BindableProperty -&gt; bool" Usage="bindableObject.IsSet targetProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="targetProperty">The bindable property to check if a value is currently set.</param>
        <summary>
            Determines whether or not a bindable property exists and has a value set.
            </summary>
        <returns>
          <see langword="true" /> if the target property exists and has been set. Otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="targetProperty" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource">
      <MemberSignature Language="C#" Value="void IDynamicResourceHandler.SetDynamicResource (Microsoft.Maui.Controls.BindableProperty property, string key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource(class Microsoft.Maui.Controls.BindableProperty property, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.Microsoft#Maui#Controls#Internals#IDynamicResourceHandler#SetDynamicResource(Microsoft.Maui.Controls.BindableProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetDynamicResource (property As BindableProperty, key As String) Implements IDynamicResourceHandler.SetDynamicResource" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource(Microsoft::Maui::Controls::BindableProperty ^ property, System::String ^ key) = Microsoft::Maui::Controls::Internals::IDynamicResourceHandler::SetDynamicResource;" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource : Microsoft.Maui.Controls.BindableProperty * string -&gt; unit&#xA;override this.Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource : Microsoft.Maui.Controls.BindableProperty * string -&gt; unit" Usage="bindableObject.Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource (property, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource(Microsoft.Maui.Controls.BindableProperty,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.OnBindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingContextChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingContextChanged();" />
      <MemberSignature Language="F#" Value="abstract member OnBindingContextChanged : unit -&gt; unit&#xA;override this.OnBindingContextChanged : unit -&gt; unit" Usage="bindableObject.OnBindingContextChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Raises the <see cref="E:Microsoft.Maui.Controls.BindableObject.BindingContextChanged" /> event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (string propertyName = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.OnPropertyChanged(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (Optional propertyName As String = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : string -&gt; unit&#xA;override this.OnPropertyChanged : string -&gt; unit" Usage="bindableObject.OnPropertyChanged propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property that has changed.</param>
        <summary>
            Raises the <see cref="E:Microsoft.Maui.Controls.BindableObject.PropertyChanged" /> event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (string propertyName = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.OnPropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (Optional propertyName As String = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : string -&gt; unit&#xA;override this.OnPropertyChanging : string -&gt; unit" Usage="bindableObject.OnPropertyChanging propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property that is changing.</param>
        <summary>
            Raises the <see cref="E:Microsoft.Maui.Controls.BindableObject.PropertyChanging" /> event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.BindableObject.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyChanged As PropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when a property value changes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanging">
      <MemberSignature Language="C#" Value="public event Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.BindableObject.PropertyChanging" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyChanging As PropertyChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::Maui::Controls::PropertyChangingEventHandler ^ PropertyChanging;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanging : Microsoft.Maui.Controls.PropertyChangingEventHandler " Usage="member this.PropertyChanging : Microsoft.Maui.Controls.PropertyChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.PropertyChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when a property value is changing.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveBinding">
      <MemberSignature Language="C#" Value="public void RemoveBinding (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveBinding(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.RemoveBinding(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveBinding (property As BindableProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveBinding(Microsoft::Maui::Controls::BindableProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.RemoveBinding : Microsoft.Maui.Controls.BindableProperty -&gt; unit" Usage="bindableObject.RemoveBinding property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The bindable property from which to remove bindings.</param>
        <summary>
            Removes a previously set binding from a bindable property.
            </summary>
        <remarks>When <paramref name="property" /> is not currently bound, nothing will happen.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="property" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public void SetBinding (Microsoft.Maui.Controls.BindableProperty targetProperty, Microsoft.Maui.Controls.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBinding(class Microsoft.Maui.Controls.BindableProperty targetProperty, class Microsoft.Maui.Controls.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetBinding(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBinding (targetProperty As BindableProperty, binding As BindingBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBinding(Microsoft::Maui::Controls::BindableProperty ^ targetProperty, Microsoft::Maui::Controls::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : Microsoft.Maui.Controls.BindableProperty * Microsoft.Maui.Controls.BindingBase -&gt; unit" Usage="bindableObject.SetBinding (targetProperty, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="binding" Type="Microsoft.Maui.Controls.BindingBase" />
      </Parameters>
      <Docs>
        <param name="targetProperty">The bindable property on which to apply <paramref name="binding" />.</param>
        <param name="binding">The binding to set for <paramref name="targetProperty" />.</param>
        <summary>
            Assigns a binding to a bindable property.
            </summary>
        <remarks>
          <para>The following example shows how to set a binding to a property:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, new Binding ("Name"));
label.BindingContext = new {
    Name = "John Doe",
    Company = "Xamarin"
};

Debug.WriteLine (label.Text); // prints "John Doe"
        ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInheritedBindingContext">
      <MemberSignature Language="C#" Value="public static void SetInheritedBindingContext (Microsoft.Maui.Controls.BindableObject bindable, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetInheritedBindingContext(class Microsoft.Maui.Controls.BindableObject bindable, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetInheritedBindingContext(Microsoft.Maui.Controls.BindableObject,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetInheritedBindingContext (bindable As BindableObject, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetInheritedBindingContext(Microsoft::Maui::Controls::BindableObject ^ bindable, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member SetInheritedBindingContext : Microsoft.Maui.Controls.BindableObject * obj -&gt; unit" Usage="Microsoft.Maui.Controls.BindableObject.SetInheritedBindingContext (bindable, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Microsoft.Maui.Controls.BindableObject" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bindable">The object on which to set the inherited binding context.</param>
        <param name="value">The inherited context to set.</param>
        <summary>
            Sets the inherited context to a nested element.
            </summary>
        <remarks>For internal use only. This API can be changed or removed without notice at any time.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (Microsoft.Maui.Controls.BindableProperty property, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class Microsoft.Maui.Controls.BindableProperty property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindableProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (property As BindableProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(Microsoft::Maui::Controls::BindableProperty ^ property, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : Microsoft.Maui.Controls.BindableProperty * obj -&gt; unit" Usage="bindableObject.SetValue (property, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">The bindable property on which to assign a value.</param>
        <param name="value">The value to set.</param>
        <summary>
            Sets the value of the specified bindable property.
            </summary>
        <remarks>If <paramref name="property" /> is read-only, nothing will happen.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="property" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindablePropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (propertyKey As BindablePropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(Microsoft::Maui::Controls::BindablePropertyKey ^ propertyKey, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : Microsoft.Maui.Controls.BindablePropertyKey * obj -&gt; unit" Usage="bindableObject.SetValue (propertyKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="Microsoft.Maui.Controls.BindablePropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyKey">The key that identifies the bindable property to assign the value to.</param>
        <param name="value">The value to set.</param>
        <summary>
            Sets the value of the specified bindable property.
            </summary>
        <remarks>
          <para>This method and <see cref="T:Microsoft.Maui.Controls.BindablePropertyKey" /> are useful to implement BindableProperties with limited write access. The write access is limited to the scope of the BindablePropertyKey.</para>
          <para>The following example shows how to declare a BindableProperty with "internal" write access.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
class MyBindable : BindableObject
{
  internal static readonly BindablePropertyKey MyPropertyKey = 
    BindableProperty.CreateReadOnly<MyBindable, string> (w => w.My, default(string));
  public static readonly BindableProperty MyProperty = MyPropertyKey.BindableProperty;
    
  public string My {
    get { return (string)GetValue (MyProperty); }
    internal set { SetValue (MyPropertyKey, value); } 
  }
}
        ]]></code>
          </example>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="propertyKey" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the bindable property identified by <paramref name="propertyKey" /> is read-only.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValueCore">
      <MemberSignature Language="C#" Value="public void SetValueCore (Microsoft.Maui.Controls.BindableProperty property, object value, Microsoft.Maui.Controls.Internals.SetValueFlags attributes = Microsoft.Maui.Controls.Internals.SetValueFlags.None);" FrameworkAlternate="net-maui-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueCore(class Microsoft.Maui.Controls.BindableProperty property, object value, valuetype Microsoft.Maui.Controls.Internals.SetValueFlags attributes) cil managed" FrameworkAlternate="net-maui-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetValueCore(Microsoft.Maui.Controls.BindableProperty,System.Object,Microsoft.Maui.Controls.Internals.SetValueFlags)" FrameworkAlternate="net-maui-7.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValueCore (property As BindableProperty, value As Object, Optional attributes As SetValueFlags = Microsoft.Maui.Controls.Internals.SetValueFlags.None)" FrameworkAlternate="net-maui-7.0" />
      <MemberSignature Language="F#" Value="member this.SetValueCore : Microsoft.Maui.Controls.BindableProperty * obj * Microsoft.Maui.Controls.Internals.SetValueFlags -&gt; unit" Usage="bindableObject.SetValueCore (property, value, attributes)" FrameworkAlternate="net-maui-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-maui-7.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-maui-7.0">System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" Index="0" FrameworkAlternate="net-maui-7.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="net-maui-7.0" />
        <Parameter Name="attributes" Type="Microsoft.Maui.Controls.Internals.SetValueFlags" Index="2" FrameworkAlternate="net-maui-7.0" />
      </Parameters>
      <Docs>
        <param name="property">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="value">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="attributes">For internal use by the Microsoft.Maui.Controls platform.</param>
        <summary>For internal use by the Microsoft.Maui.Controls platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnapplyBindings">
      <MemberSignature Language="C#" Value="protected void UnapplyBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UnapplyBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.UnapplyBindings" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UnapplyBindings ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UnapplyBindings();" />
      <MemberSignature Language="F#" Value="member this.UnapplyBindings : unit -&gt; unit" Usage="bindableObject.UnapplyBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes all current bindings from the current context.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
