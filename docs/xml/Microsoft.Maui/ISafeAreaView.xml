<Type Name="ISafeAreaView" FullName="Microsoft.Maui.ISafeAreaView">
  <TypeSignature Language="C#" Value="public interface ISafeAreaView" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISafeAreaView" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.ISafeAreaView" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISafeAreaView" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISafeAreaView" />
  <TypeSignature Language="F#" Value="type ISafeAreaView = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Provides functionality for requesting layout outside of the "safe" areas of the device screen.
            </summary>
    <remarks>
            This interface may be applied to any ILayout or IContentView.
            This interface is only recognized on the iOS/Mac Catalyst platforms; other platforms will ignore it.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="IgnoreSafeArea">
      <MemberSignature Language="C#" Value="public bool IgnoreSafeArea { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreSafeArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.ISafeAreaView.IgnoreSafeArea" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IgnoreSafeArea As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreSafeArea { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSafeArea : bool" Usage="Microsoft.Maui.ISafeAreaView.IgnoreSafeArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies how the View's content should be positioned in relation to obstructions. If this value is `false`, the 
            content will be positioned only in the unobstructed portion of the screen. If this value is `true`, the content
            may be positioned anywhere on the screen. This includes the portion of the screen behind toolbars, screen cutouts, etc.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
