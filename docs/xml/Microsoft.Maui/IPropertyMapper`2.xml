<Type Name="IPropertyMapper&lt;TVirtualView,TViewHandler&gt;" FullName="Microsoft.Maui.IPropertyMapper&lt;TVirtualView,TViewHandler&gt;">
  <TypeSignature Language="C#" Value="public interface IPropertyMapper&lt;out TVirtualView,out TViewHandler&gt; : Microsoft.Maui.IPropertyMapper where TVirtualView : IElement where TViewHandler : IElementHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPropertyMapper`2&lt;(class Microsoft.Maui.IElement) + TVirtualView, (class Microsoft.Maui.IElementHandler) + TViewHandler&gt; implements class Microsoft.Maui.IPropertyMapper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.IPropertyMapper`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPropertyMapper(Of Out TVirtualView, Out TViewHandler)&#xA;Implements IPropertyMapper" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TVirtualView, typename TViewHandler&gt;&#xA; where TVirtualView : IElement where TViewHandler : IElementHandlerpublic interface class IPropertyMapper : Microsoft::Maui::IPropertyMapper" />
  <TypeSignature Language="F#" Value="type IPropertyMapper&lt;'VirtualView, 'ViewHandler (requires 'VirtualView :&gt; IElement and 'ViewHandler :&gt; IElementHandler)&gt; = interface&#xA;    interface IPropertyMapper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TVirtualView">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <InterfaceName>Microsoft.Maui.IElement</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TViewHandler">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <InterfaceName>Microsoft.Maui.IElementHandler</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Maui.IPropertyMapper</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TVirtualView">To be added.</typeparam>
    <typeparam name="TViewHandler">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string key, Action&lt;out TViewHandler,out TVirtualView&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string key, class System.Action`2&lt;!TViewHandler, !TVirtualView&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.IPropertyMapper`2.Add(System.String,System.Action{`1,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As String, action As Action(Of Out TViewHandler, Out TVirtualView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ key, Action&lt;TViewHandler, TVirtualView&gt; ^ action);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * Action&lt;'ViewHandler, 'VirtualView (requires 'ViewHandler :&gt; Microsoft.Maui.IElementHandler and 'VirtualView :&gt; Microsoft.Maui.IElement)&gt; -&gt; unit" Usage="iPropertyMapper.Add (key, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="action" Type="System.Action&lt;TViewHandler,TVirtualView&gt;" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
